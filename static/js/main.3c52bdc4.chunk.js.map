{"version":3,"sources":["serviceWorker.ts","components/Main/styles.ts","components/Search/styles.ts","components/Search/query.ts","components/CharacterGrid/styles.ts","components/CharacterGridItem/styles.ts","components/CharacterGridItem/index.tsx","components/CharacterGrid/index.tsx","components/ButtonClose/styles.ts","components/ButtonClose/index.tsx","components/SearchResults/index.tsx","components/Party/index.tsx","components/Search/index.tsx","components/Main/index.tsx","styles.ts","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Styled","Main","styled","div","Search","form","SearchControl","input","GET_CHARACTER","gql","CharacterGrid","CharacterGridItem","CharacterGridItem__img","img","CharacterGridItem__name","CharacterGridItem__control","data","children","handleClick","onClick","Object","assign","image","name","Control","style","cursor","src","alt","props","length","map","item","ButtonClose","className","SearchResults","selectResultHandler","useContext","SearchContext","useState","results","setResults","useEffect","result","id","key","e","stopPropagation","filter","Party","scrollTo","setMatchName","cacheClear","partyCollection","setPartyCollection","element","useRef","current","scroll","top","offsetTop","left","behavior","overlapKey","find","search","RegExp","ref","keys","React","createContext","Provider","searchQuery","setSearchQuery","undefined","selectResultItem","setSelectResultItem","useLazyQuery","getCharacter","loading","timeout","setTimeout","variables","clearTimeout","characters","type","placeholder","value","onChange","currentTarget","trim","searchControlChangeHandler","set","GlobalStyling","createGlobalStyle","App","client","ApolloClient","cache","InMemoryCache","link","createHttpLink","uri","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3c52bdc4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import styled from 'styled-components';\n\nexport const Main = styled.div`\n  width: 100%;\n  max-width: 810px;\n  margin: 142px auto;\n`;\nexport const Styled = {\n  Main,\n};\n","import styled from 'styled-components';\n\nexport const Search = styled.form`\n  display: block;\n  margin-bottom: 30px;\n`;\n\nexport const SearchControl = styled.input`\n  width: 100%;\n  height: 80px;\n  border: 1px solid #a0a0a0;\n  padding: 0 27px;\n  font-weight: 300;\n  font-size: 30px;\n  text-transform: uppercase;\n  &::placeholder {\n    text-transform: none;\n  }\n`;\n\nexport const Styled = {\n  Search,\n  SearchControl,\n};\n","import gql from 'graphql-tag';\n\nexport interface ICharacter {\n  name: string;\n  image: string;\n  id: string;\n}\n\nexport interface ICharacterData {\n  characters?: {\n    results: ICharacter[];\n  };\n}\n\nexport const GET_CHARACTER = gql`\n  query($name: String!) {\n    characters(filter: { name: $name }) {\n      results {\n        id\n        name\n        image\n      }\n    }\n  }\n`;\n","import styled from 'styled-components';\n\nexport const CharacterGrid = styled.div`\n  display: grid;\n  grid-gap: 30px;\n  margin-bottom: 30px;\n  grid-template-columns: repeat(4, 1fr);\n`;\nexport const Styled = {\n  CharacterGrid,\n};\n","import styled from 'styled-components';\n\nexport const CharacterGridItem = styled.div`\n  line-height: 0;\n  background-color: #dadada;\n  position: relative;\n  height: 220px;\n  overflow: hidden;\n  > * {\n    position: relative;\n  }\n`;\nexport const CharacterGridItem__img = styled.img`\n  width: 100%;\n  height: inherit;\n  object-fit: cover;\n  z-index: 150;\n`;\nexport const CharacterGridItem__name = styled.div`\n  position: absolute;\n  z-index: 100;\n  left: 10px;\n  right: 10px;\n  bottom: 28px;\n  text-transform: uppercase;\n  color: #fff;\n  line-height: 1;\n  text-align: center;\n`;\nexport const CharacterGridItem__control = styled.div`\n  display: flex;\n  position: absolute;\n  right: 0;\n  top: 0;\n  padding: 8px;\n  z-index: 200;\n  align-items: center;\n  justify-content: right;\n  * > {\n    &:not(:first-child) {\n      margin-left: 8px;\n    }\n  }\n`;\nexport const Styled = {\n  CharacterGridItem,\n  CharacterGridItem__img,\n  CharacterGridItem__name,\n  CharacterGridItem__control,\n};\n","import React, { ReactNode } from 'react';\nimport { Styled } from './styles';\n\nexport interface ICharacterGridItemData {\n  image?: string | undefined;\n  name?: string;\n}\n\ninterface ICharacterGridItem {\n  data?: ICharacterGridItemData;\n  onClick?: (e: React.MouseEvent) => void;\n  children?: {\n    Control?: ReactNode;\n  };\n}\n\nconst CharacterGridItem: React.FC<ICharacterGridItem> = ({\n  data = {},\n  children = {},\n  onClick: handleClick,\n}) => {\n  const { image, name, Control } = Object.assign({}, data, children);\n  return (\n    <Styled.CharacterGridItem\n      onClick={handleClick}\n      style={{ cursor: handleClick ? 'pointer' : 'default' }}\n    >\n      {Control && <Styled.CharacterGridItem__control>{Control}</Styled.CharacterGridItem__control>}\n      {image && <Styled.CharacterGridItem__img src={image} alt={name || ''} />}\n      {name && <Styled.CharacterGridItem__name>{name}</Styled.CharacterGridItem__name>}\n    </Styled.CharacterGridItem>\n  );\n};\nexport default CharacterGridItem;\n","import React from 'react';\nimport { Styled } from './styles';\n\nimport CharacterGridItem from '../CharacterGridItem';\n\ninterface ICharacterGrid {\n  data?: any[];\n}\n\nconst CharacterGrid: React.FC<ICharacterGrid & React.HTMLAttributes<HTMLDivElement>> = ({\n  data,\n  children,\n  ...props\n}) => {\n  if (children) {\n    return <Styled.CharacterGrid {...props}>{children}</Styled.CharacterGrid>;\n  }\n  return data && data.length ? (\n    <Styled.CharacterGrid {...props}>\n      {data.map((item) => (\n        <CharacterGridItem data={item} />\n      ))}\n    </Styled.CharacterGrid>\n  ) : null;\n};\n\nexport default CharacterGrid;\n","import styled from 'styled-components';\nexport const ButtonClose = styled.div`\n  display: inline-flex;\n  cursor: pointer;\n  height: 30px;\n  min-width: 30px;\n  border-radius: 100%;\n  align-items: center;\n  justify-content: center;\n  line-height: 0;\n  font-size: 14px;\n  background-color: rgba(255, 255, 255, 0.75);\n  transition: background-color 0.25s ease;\n  &:hover {\n    background-color: rgba(255, 255, 255, 1);\n  }\n`;\nexport const Styled = {\n  ButtonClose,\n};\n","import React from 'react';\nimport { Styled } from './styles';\n\ninterface IButtonClose {\n  onClick?: (e: React.MouseEvent) => void;\n}\n\nconst ButtonClose: React.FC<IButtonClose> = ({ onClick: handleClick, children }) => (\n  <Styled.ButtonClose onClick={handleClick}>\n    {children ? children : <i className=\"fas fa-times\" />}\n  </Styled.ButtonClose>\n);\n\nexport default ButtonClose;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { ICharacter } from '../Search/query';\n\nimport CharacterGrid from '../CharacterGrid';\nimport CharacterGridItem from '../CharacterGridItem';\nimport ButtonClose from '../ButtonClose';\n\nimport { SearchContext } from '../Search';\n\ninterface ISearchResults {\n  data: ICharacter[];\n}\ntype Results = ICharacter[];\n\nconst SearchResults: React.FC<ISearchResults> = ({ data = [] }) => {\n  const { selectResultHandler } = useContext(SearchContext);\n\n  const [results, setResults] = useState<Results>([]);\n\n  useEffect(() => {\n    setResults(data);\n  }, [data]);\n\n  const resultItemRemoveHandler = (id: string) => {\n    setResults(results.filter((item) => item.id !== id));\n  };\n\n  if (!results.length) {\n    return null;\n  }\n\n  return (\n    <CharacterGrid>\n      {results.map((result) => {\n        return (\n          <CharacterGridItem\n            onClick={() => {\n              selectResultHandler(result.id);\n            }}\n            key={result.id}\n            data={result}\n          >\n            {{\n              Control: (\n                <>\n                  <ButtonClose\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      resultItemRemoveHandler(result.id);\n                    }}\n                  />\n                </>\n              ),\n            }}\n          </CharacterGridItem>\n        );\n      })}\n    </CharacterGrid>\n  );\n};\nexport default SearchResults;\n/*\n\n */\n","import React, { useEffect, useState, useRef } from 'react';\nimport CharacterGrid from '../CharacterGrid';\nimport CharacterGridItem from '../CharacterGridItem';\n\ntype Character = {\n  name: string;\n  image: string;\n};\n\ntype IParty = {\n  setMatchName: string[];\n  item?: Character;\n  cacheClear?: boolean;\n  scrollTo?: any;\n};\n\ntype PartyCollection = {\n  [key: string]: Character;\n};\n\nconst Party: React.FC<IParty> = ({\n  scrollTo = false,\n  setMatchName = [],\n  item,\n  cacheClear = false,\n}) => {\n  const [partyCollection, setPartyCollection] = useState<PartyCollection>({});\n  const element = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    if (scrollTo && item && element.current) {\n      window.scroll({\n        top: element.current.offsetTop - 30,\n        left: 0,\n        behavior: 'smooth',\n      });\n    }\n    if (item) {\n      let overlapKey =\n        setMatchName.find((name) => item['name'].search(new RegExp(name, 'ig')) > -1) || '';\n      setPartyCollection(cacheClear ? {} : { ...partyCollection, [overlapKey]: item });\n    }\n  }, [item, cacheClear, scrollTo]);\n\n  return (\n    <div ref={element}>\n      {setMatchName.length && Object.keys(partyCollection).length ? (\n        <>\n          <h1 className=\"uppercase text-center\">Party</h1>\n          <CharacterGrid className=\"mb-0\">\n            {setMatchName.map((name) => (\n              <CharacterGridItem\n                key={name}\n                data={{\n                  image: partyCollection[name] && partyCollection[name]['image'],\n                  name,\n                }}\n              />\n            ))}\n          </CharacterGrid>\n        </>\n      ) : null}\n    </div>\n  );\n};\nexport default Party;\n","import React, { useEffect, useState } from 'react';\nimport { useLazyQuery } from '@apollo/react-hooks';\n\nimport { Styled } from './styles';\n\nimport { GET_CHARACTER, ICharacterData, ICharacter } from './query';\n\nimport ResultsSearch from '../SearchResults';\nimport Party from '../Party';\n\ntype SelectResultItem = ICharacter | undefined;\n\nexport interface ISearchContext {\n  selectResultHandler: (id: string) => void;\n  results: ICharacter[];\n}\nexport const SearchContext = React.createContext<ISearchContext>({\n  selectResultHandler() {},\n  results: [],\n});\nexport const Provider = SearchContext.Provider;\n\nconst Search: React.FC = () => {\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [selectResultItem, setSelectResultItem] = useState<SelectResultItem>(undefined);\n  const [getCharacter, { data = {}, loading }] = useLazyQuery<ICharacterData>(GET_CHARACTER);\n  const searchQueryMinSize = 2;\n  useEffect(() => {\n    if (searchQuery.length < searchQueryMinSize) {\n      return;\n    }\n    const timeout = setTimeout(() => {\n      getCharacter({ variables: { name: searchQuery } });\n    }, 300); // delay\n    return () => clearTimeout(timeout);\n  }, [searchQuery]);\n  const { results = [] } = data.characters || {};\n\n  const selectResultHandler = (id: string) => {\n    const set = results.filter((item) => item.id === id)[0] || false;\n    if (set) {\n      setSelectResultItem(set);\n    }\n  };\n\n  const searchControlChangeHandler = (e: React.FormEvent<HTMLInputElement>) => {\n    setSearchQuery(e.currentTarget.value.trim());\n  };\n  return (\n    <>\n      <Styled.Search>\n        <Styled.SearchControl\n          className=\"ellipsis\"\n          type=\"text\"\n          placeholder=\"Enter character name...\"\n          value={searchQuery}\n          onChange={(e) => searchControlChangeHandler(e)}\n        />\n      </Styled.Search>\n      {loading ? (\n        <div>loading ...</div>\n      ) : !results.length && searchQuery.length >= searchQueryMinSize ? (\n        <div>Nothing found for your request</div>\n      ) : null}\n      <Provider\n        value={{\n          selectResultHandler,\n          results,\n        }}\n      >\n        {results !== null && (\n          <>\n            <ResultsSearch data={results} />\n            <Party scrollTo setMatchName={['rick', 'morty']} item={selectResultItem} />\n          </>\n        )}\n      </Provider>\n    </>\n  );\n};\nexport default Search;\n","import React from 'react';\nimport { Styled } from './styles';\nimport Search from '../Search';\n\nconst Main: React.FC = () => (\n  <Styled.Main>\n    <Search />\n  </Styled.Main>\n);\nexport default Main;\n","import { createGlobalStyle } from 'styled-components/macro';\nexport const GlobalStyling = createGlobalStyle`\n\th1{\n\t  font-size: 30px;\n\t  margin-bottom: 30px;\n\t}\n\t.ellipsis{\n\t\twhite-space: nowrap;\n\t    text-overflow:ellipsis;\n\t    overflow: hidden;\n\t}\n    .uppercase{\n      text-transform: uppercase;\n    }\n    .text-center{\n      text-align: center;\n    }\n    .text-left{\n      text-align: left;\n    }\n    .text-right{\n      text-align: right;\n    }\n    .mb-0{\n      margin-bottom: 0;\n    }\n`;\n","import React from 'react';\nimport Main from './components/Main';\nimport { GlobalStyling } from './styles';\nimport 'css-reset-and-normalize/css/reset-and-normalize.min.css';\nimport '@fortawesome/fontawesome-free/css/solid.min.css';\nimport '@fortawesome/fontawesome-free/css/fontawesome.min.css';\nconst App: React.FC = () => (\n  <>\n    <GlobalStyling />\n    <Main />\n  </>\n);\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport { ApolloClient } from 'apollo-client';\nimport { createHttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloProvider } from 'react-apollo';\n\nexport const client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: createHttpLink({\n    uri: 'https://rickandmortyapi.com/graphql',\n  }),\n});\n//import './index.css';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}